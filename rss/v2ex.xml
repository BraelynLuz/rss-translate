<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>V2EX</title><link>https://www.v2ex.com/</link><description>way to explore</description><lastBuildDate>Thu, 12 Oct 2023 08:43:57 GMT</lastBuildDate><generator>rfeed v1.1.1</generator><docs>https://github.com/svpino/rfeed/blob/master/README.md</docs><item><title>[Apple] 发现个奇怪 imessage 的问题</title><link>https://www.v2ex.com/t/981384#reply0</link><description>&lt;p&gt;开飞行模式仅有 wifi 之后就会一直发不出去，&lt;/p&gt;</description><pubDate>Thu, 12 Oct 2023 08:38:52 GMT</pubDate><guid isPermaLink="true">https://www.v2ex.com/t/981384#reply0</guid></item><item><title>[问与答] 充电器(Charger)能代替电源适配器(Adapter)吗？</title><link>https://www.v2ex.com/t/981383#reply1</link><description>&lt;p&gt;如题，相同接口，电压电流的适配器，能否用充电器代替。
比如我有个路由器，使用 12v1a 电源适配器欸，如果换成 12v1a 的充电器，会怎样？&lt;/p&gt;</description><pubDate>Thu, 12 Oct 2023 08:37:40 GMT</pubDate><guid isPermaLink="true">https://www.v2ex.com/t/981383#reply1</guid></item><item><title>[VPS] 小白问一下，在买 vps 的时候，怎么确定有没有屏蔽 udp 啊</title><link>https://www.v2ex.com/t/981382#reply0</link><description>&lt;p&gt;已经很多年没有玩 vps ，以前也就买来搭 blog ，代理&lt;/p&gt;</description><pubDate>Thu, 12 Oct 2023 08:36:32 GMT</pubDate><guid isPermaLink="true">https://www.v2ex.com/t/981382#reply0</guid></item><item><title>[问与答] 为什么 clash 代理 http 流量这么慢</title><link>https://www.v2ex.com/t/981381#reply0</link><description>&lt;p&gt;小白不是很懂 clash 的细节，今天下载一个文件 &lt;a href="http://repository.spotify.com/pool/non-free/s/spotify-client/spotify-client_1.2.22.982.g794acc0a_amd64.deb" rel="nofollow"&gt;http://repository.spotify.com/pool/non-free/s/spotify-client/spotify-client_1.2.22.982.g794acc0a_amd64.deb&lt;/a&gt;
打开浏览器看过，&lt;a href="http://repository.spotify.com" rel="nofollow"&gt;repository.spotify.com&lt;/a&gt; 没有 SSL 证书，https 连不上。
这是我在自己电脑上下载，用 clash 的 tun 模式实现了透明代理，命令行也有 http_proxy 和 https_proxy 环境变量
&lt;img alt="img" class="embedded_image" rel="noreferrer" src="https://raw.githubusercontent.com/z2z63/image/main/imgimage_2023-10-12_16-13-34.png" /&gt;
中途尝试切换成全局模式，速度还是很慢&lt;/p&gt;
&lt;p&gt;然后我突发奇想，会不会是防火墙 QoS 了我的流量？
登录我的新加坡服务器，执行同一个命令
&lt;img alt="img" class="embedded_image" rel="noreferrer" src="https://raw.githubusercontent.com/z2z63/image/main/img20231012164029.png" /&gt;
速度突然变快了&lt;/p&gt;
&lt;p&gt;我对 clash 不太了解，难道是 clash 转发后，过墙流量没加密？&lt;/p&gt;</description><pubDate>Thu, 12 Oct 2023 08:33:56 GMT</pubDate><guid isPermaLink="true">https://www.v2ex.com/t/981381#reply0</guid></item><item><title>[Apple] 使用 win11+vm 虚拟机，安装 mac 系统</title><link>https://www.v2ex.com/t/981380#reply0</link><description>&lt;p&gt;请教各位：如果使用 win11+vm 虚拟机，安装 mac ，再登入 Apple ID ，以同步照片。这样操作有人用过吗？可能有什么风险或者坑吗？谢谢各位&lt;/p&gt;</description><pubDate>Thu, 12 Oct 2023 08:32:58 GMT</pubDate><guid isPermaLink="true">https://www.v2ex.com/t/981380#reply0</guid></item><item><title>[问与答] 园区有几百个大专实习生，能接什么项目？</title><link>https://www.v2ex.com/t/981379#reply2</link><description>&lt;p&gt;朋友搞了个几十亩地的园区，里面有办公室，食堂，宿舍，宿舍有 2000 个床位
现在和湖南的一些大专院校谈，接纳学生实习的事情，已经有几个大专院校的领导来园区考察过了，接下来就是去学校宣讲招生，双向选择，学校不会强制学生出来实习，这些大专院校算了下，加起来大概有 8000 来个学生等着去聊，即使 10 个里面来 1 个，也有 800 人来园区上班。&lt;/p&gt;
&lt;p&gt;对学生来讲，除了 300 块的宿舍费，不收其他任何费用，工作内容说是说 AI 相关，其实就是电脑上面打螺丝，只要人不蠢，有个一两天，都能上手。没底薪，按件计工价，估计做下来也就两三千块钱一个月。&lt;/p&gt;
&lt;p&gt;由于他现在这个打螺丝项目也是上游合作伙伴给他的，他赚头也不大，想问一问大家，还有啥项目适合这帮实习生在园区里面操作。一方面增加学生的收入让学生留得下来，另一方面他也能多赚点。&lt;/p&gt;
&lt;p&gt;如果各位大佬手上有合适的项目，咱们也可以聊合作。&lt;/p&gt;
&lt;p&gt;ps：打电话的不搞（什么信用卡，贷款，手机卡套餐，催收），灰色产业不搞，必须是合法项目&lt;/p&gt;</description><pubDate>Thu, 12 Oct 2023 08:27:54 GMT</pubDate><guid isPermaLink="true">https://www.v2ex.com/t/981379#reply2</guid></item><item><title>[北京] 北京事件一周年</title><link>https://www.v2ex.com/t/981378#reply1</link><description>勿忘历史</description><pubDate>Thu, 12 Oct 2023 08:27:18 GMT</pubDate><guid isPermaLink="true">https://www.v2ex.com/t/981378#reply1</guid></item><item><title>[云计算] 双 11 活动提前来了，冲</title><link>https://www.v2ex.com/t/981377#reply4</link><description>轻量 1 核 2G1T 流量  99/年&lt;br /&gt;轻量 2 核 4G3T 流量  190/年&lt;br /&gt;云服务器 1 核 2G1M 带宽 50/年，150/3 年&lt;br /&gt;云服务器 4 核 8G5M 带宽 373/年&lt;br /&gt;&lt;br /&gt;&lt;a href="https://www.ucloud.cn/site/active/kuaijiesale.html" rel="nofollow noopener" target="_blank"&gt;https://www.ucloud.cn/site/active/kuaijiesale.html&lt;/a&gt;</description><pubDate>Thu, 12 Oct 2023 08:27:03 GMT</pubDate><guid isPermaLink="true">https://www.v2ex.com/t/981377#reply4</guid></item><item><title>[问与答] 汽车雨刮器大家有推荐的吗？</title><link>https://www.v2ex.com/t/981376#reply1</link><description>&lt;p&gt;小弟看了几款不知道那个好，法雷奥，米其林，水弹镀膜，固特异，大家还有其他推荐，或者有用过的朋友分享一下吧&lt;/p&gt;</description><pubDate>Thu, 12 Oct 2023 08:25:51 GMT</pubDate><guid isPermaLink="true">https://www.v2ex.com/t/981376#reply1</guid></item><item><title>[问与答] 我的 chrome 浏览器怎么显示在中国</title><link>https://www.v2ex.com/t/981375#reply0</link><description>已经挂了代理，在谷歌账户安全性您的装置里，我的 chrome 浏览器怎么显示在中国？</description><pubDate>Thu, 12 Oct 2023 08:23:30 GMT</pubDate><guid isPermaLink="true">https://www.v2ex.com/t/981375#reply0</guid></item><item><title>[问与答] 观看'	请教脑梗的问题' 有感， 伯父脑出血导致中风，现在偏瘫，如何治疗</title><link>https://www.v2ex.com/t/981374#reply0</link><description>生病到现在已经有 2 年左右，去过不少医院，各大医院康复科是否有帮助？&lt;br /&gt;上海华山医院康复科住进去能治好吗？</description><pubDate>Thu, 12 Oct 2023 08:22:06 GMT</pubDate><guid isPermaLink="true">https://www.v2ex.com/t/981374#reply0</guid></item><item><title>[前端开发] 请教一下 nextUI 样式出不来的问题？</title><link>https://www.v2ex.com/t/981373#reply0</link><description>&lt;h2&gt;环境&lt;/h2&gt;
&lt;p&gt;就是一个空的 react 项目，感觉 nextUI 的样式很好看，然后搭建完后，样式出不来..&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-shell"&gt;# package.json
{
"name": "my-app",
"version": "0.1.0",
"private": true,
"dependencies": {
  "@nextui-org/react": "^2.1.13",
  "@testing-library/jest-dom": "^5.17.0",
  "@testing-library/react": "^13.4.0",
  "@testing-library/user-event": "^13.5.0",
  "@types/jest": "^27.5.2",
  "@types/node": "^16.18.53",
  "@types/react": "^18.2.22",
  "@types/react-dom": "^18.2.7",
  "@types/react-router-dom": "^5.3.3",
  "react": "^18.2.0",
  "react-dom": "^18.2.0",
  "react-router-dom": "^6.16.0",
  "react-scripts": "5.0.1",
  "typescript": "^4.9.5",
  "web-vitals": "^2.1.4"
},
"scripts": {
  "start": "react-scripts start",
  "build": "react-scripts build",
  "test": "react-scripts test",
  "eject": "react-scripts eject"
},
"eslintConfig": {
  "extends": [
    "react-app",
    "react-app/jest"
  ]
},
"browserslist": {
  "production": [
    "&amp;gt;0.2%",
    "not dead",
    "not op_mini all"
  ],
  "development": [
    "last 1 chrome version",
    "last 1 firefox version",
    "last 1 safari version"
  ]
},
"devDependencies": {
  "tailwindcss": "^3.3.3"
}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-shell"&gt;#tailwind.config.js

/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    // ...
    "./node_modules/@nextui-org/theme/dist/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  darkMode: "class",
  plugins: [nextui()],
};
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;#App.tsx

import * as React from "react";
import {Button} from "@nextui-org/react";

// 1. import `NextUIProvider` component
import {NextUIProvider} from "@nextui-org/react";

function App() {
  // 2. Wrap NextUIProvider at the root of your app
  return (
    &amp;lt;NextUIProvider&amp;gt;
    &amp;lt;Button color="primary"&amp;gt;
          Button
    &amp;lt;/Button&amp;gt;
    &amp;lt;/NextUIProvider&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后结果是 这个 Button 没有任何效果....&lt;/p&gt;
&lt;h2&gt;PS&lt;/h2&gt;
&lt;p&gt;有大佬用 nextUI 上过现网吗&lt;/p&gt;</description><pubDate>Thu, 12 Oct 2023 08:21:43 GMT</pubDate><guid isPermaLink="true">https://www.v2ex.com/t/981373#reply0</guid></item><item><title>[Ruby] [翻译] Async Ruby（异步 Ruby）</title><link>https://www.v2ex.com/t/981372#reply0</link><description>&lt;ul&gt;
&lt;li&gt;原文作者：&lt;a href="https://brunosutic.com/" rel="nofollow"&gt;Bruno Sutic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;原文链接: &lt;a href="https://brunosutic.com/blog/async-ruby" rel="nofollow"&gt;《 Async Ruby 》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;原文时间：2021 年 10 月 30 日&lt;/li&gt;
&lt;li&gt;原文讨论：&lt;a href="https://news.ycombinator.com/item?id=29049881" rel="nofollow"&gt;Hacker News 讨论&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;译者：&lt;a href="https://github.com/Mark24Code" rel="nofollow"&gt;Mark24&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;译者 Email： &lt;a href="mailto:mark.zhangyoung@gmail.com"&gt;mark.zhangyoung@gmail.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;译文链接： &lt;a href="https://mark24code.github.io/ruby/2023/10/12/Async-Ruby.html" rel="nofollow"&gt;https://mark24code.github.io/ruby/2023/10/12/Async-Ruby.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ruby 已经有了异步实现！&lt;/p&gt;
&lt;p&gt;它现在就可使用，已经做好了投入生产的准备，而且它可能是过去十年甚至更久时间里 Ruby 发生的最令人振奋的事情。&lt;/p&gt;
&lt;p&gt;Async Ruby 给这门语言添加了新的并发特性；你可以将其视为“没有任何缺点的线程”。它已经在酝酿了几年，也终
于在 Ruby 3.0 中准备好进入主流。&lt;/p&gt;
&lt;p&gt;在这篇文章中，我希望向你展示异步 Ruby 的所有力量、可扩展性和魔力。&lt;strong&gt;如果你热爱 Ruby ，那这应该会让你非常激动！&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;Async gem&lt;/h3&gt;
&lt;p&gt;什么是 Async Ruby ？&lt;/p&gt;
&lt;p&gt;首先，&lt;a href="https://github.com/socketry/async" rel="nofollow"&gt;Async 只是一个 gem&lt;/a&gt;，可以通过 &lt;code&gt;gem install async&lt;/code&gt; 进行安装。这是一个相当特殊的 gem ，因为 &lt;strong&gt;Matz( Ruby 的创始人) 请它加入 Ruby 的标准库&lt;/strong&gt;，但邀请还未被接受。&lt;/p&gt;
&lt;p&gt;Async Ruby 是由 &lt;a href="https://github.com/ioquatix" rel="nofollow"&gt;Samuel Williams&lt;/a&gt; 创建的，他也是一个 Ruby 核心贡献者。Samuel 还实现了 Fiber Scheduler （纤程调度器），这是 Ruby 3.0 的一个重要特性。它是"库无关的"，未来可能有其他用途，但目前，&lt;strong&gt;纤程调度器的主要目的是使 async gem 与 Ruby 无缝集成&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;并不是很多 gem 能得到他们自定义的 Ruby 集成，但这个是值得的！&lt;/p&gt;
&lt;p&gt;所有这些都告诉你，&lt;code&gt;async&lt;/code&gt; 不是"只是外面的另一个 gem"。&lt;strong&gt;Ruby 核心团队，包括 Matz 本人，都在支持这个 gem ，希望它能成功。&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;Async 生态&lt;/h3&gt;
&lt;p&gt;Async 还是一个 gem 生态系统，这些 gem 能很好地一起工作。以下是一些最有用的例子：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;async-http&lt;/code&gt; 是一个功能丰富的 HTTP 客户端&lt;/li&gt;
&lt;li&gt;&lt;code&gt;falcon&lt;/code&gt; 是围绕 Async 核心构建的 HTTP 服务器&lt;/li&gt;
&lt;li&gt;&lt;code&gt;async-await&lt;/code&gt; 是 Async 的语法糖&lt;/li&gt;
&lt;li&gt;&lt;code&gt;async-redis&lt;/code&gt; 是 Redis 客户端&lt;/li&gt;
&lt;li&gt;...以及许多其他的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;虽然上面列出的每一个 gem 都提供了一些有用的东西，但事实是你只需要核心 async gem 就可以获取它的大部分好处。&lt;/p&gt;
&lt;h3&gt;异步模型（ Asynchronous paradigm ）&lt;/h3&gt;
&lt;p&gt;Asynchronous programming （异步编程），（在任何语言中，包括 Ruby ）允许同时运行许多事情。这最常见的是多个网络 I/O 操作（如 HTTP 请求），因为在这方面 &lt;code&gt;async&lt;/code&gt; 是最有效的。&lt;/p&gt;
&lt;p&gt;多任务操作经常带来混乱：“回调地狱（ callback hell ）”，“Promise hell （ Promise 地狱）”，乃至 "async-await hell （ async-await 地狱）" 是其他语言中 &lt;code&gt;async&lt;/code&gt; 接口的众所周知的缺点。&lt;/p&gt;
&lt;p&gt;但 Ruby 是不同的。&lt;strong&gt;由于其超群的设计，Async Ruby 不受任何这些 *-地狱的困扰。它允许编写出令人惊喜的干净、简单且有序的代码。&lt;/strong&gt;它是一个像 Ruby 一样优雅的 async 实现。&lt;/p&gt;
&lt;p&gt;注意：Async 不能绕过 Ruby 的全局解释器锁（ GIL ）。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;译者注：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Async gem 以及 Fiber Scheduler 都是工作在当前主线程。他们受到 GIL 约束。&lt;/li&gt;
&lt;li&gt;不受 GIL 约束参考 &lt;a href="https://docs.ruby-lang.org/en/master/ractor_md.html" rel="nofollow"&gt;Ractor&lt;/a&gt;，Ractor 被设计用来提供 Ruby 的并行执行功能，而不需要考虑线程安全问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;同步示例（ Synchronous example ）&lt;/h3&gt;
&lt;p&gt;让我们从一个简单的例子开始：&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-ruby"&gt;require "open-uri"

start = Time.now

URI.open("https://httpbin.org/delay/1.6")
URI.open("https://httpbin.org/delay/1.6")

puts "Duration: #{Time.now - start}"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上述代码正在发起两个 HTTP 请求。单个 HTTP 请求的总持续时间为 2 秒，包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;大约 0.2 秒的网络延迟在进行请求时&lt;/li&gt;
&lt;li&gt;1.6 秒的服务器处理时间&lt;/li&gt;
&lt;li&gt;大约 0.2 秒的网络延迟在接收响应时&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;让我们运行这个示例：&lt;/p&gt;
&lt;p&gt;持续时间：4.010390391&lt;/p&gt;
&lt;p&gt;如预期，程序需要 2 x 2 秒 = 4 秒才能完成。&lt;/p&gt;
&lt;p&gt;这段代码还不错，但它运行速度慢。对于这两个请求，执行过程大概像这样：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;触发一个 HTTP （超文本传输协议）请求&lt;/li&gt;
&lt;li&gt;等待 2 秒以获取响应&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;问题在于程序在大部分时间里都处于等待状态； 2 秒钟（对于计算机）就像永恒。&lt;/p&gt;
&lt;h3&gt;Threads （线程）&lt;/h3&gt;
&lt;p&gt;提高多个网络请求速度的常用方法是使用线程。以下是一个示例：&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-ruby"&gt;require "open-uri"

@counter = 0

start = Time.now

1.upto(2).map {
  Thread.new do
    URI.open("https://httpbin.org/delay/1.6")

    @counter += 1
  end
}.each(&amp;amp;:join)

puts "Duration: #{Time.now - start}"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;代码的输出是：&lt;/p&gt;
&lt;p&gt;持续时间: 2.055751087&lt;/p&gt;
&lt;p&gt;我们将执行时间缩短到 2 秒钟，这表明请求在同时运行。那么，问题解决了吗？&lt;/p&gt;
&lt;p&gt;好吧，别过于着急：&lt;strong&gt;如果你做过任何真实世界的线程编程，你会知道线程很难。真的，非常难。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果你打算做任何严肃的线程工作，你最好习惯使用互斥（ mutexes ），条件变量（ condition variables ），处理语言级的竞态条件（ race conditions ）...甚至我们的简单示例在 @&lt;a href="https://www.v2ex.com/member/counter"&gt;counter&lt;/a&gt; += 1 这一行就有一个竞态条件错误！&lt;/p&gt;
&lt;p&gt;线程是困难的，并且毫无疑问下面的声明在 Ruby 社区一直被不断提及：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  I regret adding threads.

                    — Matz
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Async 例子&lt;/h2&gt;
&lt;p&gt;鉴于所有的线程复杂性，Ruby 社区早就应该有一个更好的并发模式。有了 Async Ruby ，我们终于有了一种。&lt;/p&gt;
&lt;h3&gt;async-http&lt;/h3&gt;
&lt;p&gt;让我们看看使用 Async Ruby 来进行两次 HTTP 请求的同样的例子：&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-ruby"&gt;require "async"
require "async/http/internet"

start = Time.now

Async do |task|
  http_client = Async::HTTP::Internet.new

  task.async do
    http_client.get("https://httpbin.org/delay/1.6")
  end

  task.async do
    http_client.get("https://httpbin.org/delay/1.6")
  end
end

puts "Duration: #{Time.now - start}"

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;示例的输出是：&lt;/p&gt;
&lt;p&gt;持续时间：1.996420725&lt;/p&gt;
&lt;p&gt;看看总运行时间，我们可以看出请求是同时运行的。&lt;/p&gt;
&lt;p&gt;这个例子显示了 Async Ruby 程序的一般结构：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;你总是从一个传递任务的 &lt;code&gt;Async&lt;/code&gt; 块开始。&lt;/li&gt;
&lt;li&gt;这个主任务通常用于用 &lt;code&gt;task.async&lt;/code&gt; 生成更多的 &lt;code&gt;Async&lt;/code&gt; 任务。&lt;/li&gt;
&lt;li&gt;这些任务相互并发运行，也与主任务并发运行。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一旦你习惯了，你会发现这个结构实际上非常整洁。&lt;/p&gt;
&lt;h3&gt;URI.open&lt;/h3&gt;
&lt;p&gt;前一个例子中可以被认为是一个缺点的事情是，它使用了 &lt;code&gt;async-http&lt;/code&gt;，一个具有异步特性的 HTTP 客户端。我们大多数人有自己喜欢的 Ruby HTTP 客户端，我们不想再花时间去学习另一个 HTTP 库的详细情况。
让我们看收同样的例子，只是这次使用 URI.open：&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-ruby"&gt;require "async"
require "open-uri"

start = Time.now

Async do |task|
  task.async do
    URI.open("https://httpbin.org/delay/1.6")
  end

  task.async do
    URI.open("https://httpbin.org/delay/1.6")
  end
end

puts "Duration: #{Time.now - start}"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;与前一个例子的唯一区别是，我们用 Ruby 的标准库中的方法 &lt;code&gt;URI.open&lt;/code&gt; 替换了 &lt;code&gt;async-http&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;示例的输出是：&lt;/p&gt;
&lt;p&gt;持续时间：2.030451785&lt;/p&gt;
&lt;p&gt;这个持续时间显示了两个请求是并行运行的，所以我们认为 &lt;code&gt;URI.open&lt;/code&gt; 是异步运行的！&lt;/p&gt;
&lt;p&gt;这一切真的很好。我们不仅不需要忍受线程及其复杂性，而且我们可以使用 Ruby 的标准 &lt;code&gt;URI.open&lt;/code&gt; 来运行请求，&lt;/p&gt;
&lt;p&gt;无论是在 &lt;code&gt;Async&lt;/code&gt; 块的外部还是内部。这无疑可以为我们提供一些方便的代码重用。&lt;/p&gt;
&lt;h3&gt;其他 HTTP clients&lt;/h3&gt;
&lt;p&gt;虽然 &lt;code&gt;URI.open&lt;/code&gt; 是普通的 Ruby ，但可能并不是你喜欢的进行 HTTP 请求的方式。而且，你也不经常看到它被用于"serious work(正式的工作)"。&lt;/p&gt;
&lt;p&gt;你可能有你自己喜欢的 HTTP  gem ，你可能会问 "它能在 Async 中工作吗"？为了找出答案，这里有一个使用 &lt;code&gt;HTTParty&lt;/code&gt;（一种知名的 HTTP 客户端）的例子。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-ruby"&gt;require "async"
require "open-uri"
require "httparty"

start = Time.now

Async do |task|
  task.async do
    URI.open("https://httpbin.org/delay/1.6")
  end

  task.async do
    HTTParty.get("https://httpbin.org/delay/1.6")
  end
end

puts "Duration: #{Time.now - start}"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在这个例子中，我们在一起运行了 &lt;code&gt;URI.open&lt;/code&gt; 和 &lt;code&gt;HTTParty&lt;/code&gt;，这完全没问题。&lt;/p&gt;
&lt;p&gt;输出是：&lt;/p&gt;
&lt;p&gt;持续时间：2.010069566&lt;/p&gt;
&lt;p&gt;它运行的时间稍微超过了 2 秒，这表明两个请求是并发运行的（同时进行）。
这里的要点是：&lt;strong&gt;你可以在一个 Async 上下文中运行任何 HTTP 客户端，它将会异步运行。Async Ruby 完全支持任何现有的 HTTP gem ！&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;高级例子&lt;/h2&gt;
&lt;p&gt;到目前为止，我们只看到 Async Ruby 用各种 HTTP 客户端进行请求。让我们揭示 Async 在 Ruby 3 中的全部能力。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-ruby"&gt;require "async"
require "open-uri"
require "httparty"
require "redis"
require "net/ssh"
require "sequel"

DB = Sequel.postgres
Sequel.extension(:fiber_concurrency)
start = Time.now

Async do |task|
  task.async do
    URI.open("https://httpbin.org/delay/1.6")
  end

  task.async do
    HTTParty.get("https://httpbin.org/delay/1.6")
  end

  task.async do
    Redis.new.blpop("abc123", 2)
  end

  task.async do
    Net::SSH.start("164.90.237.21").exec!("sleep 1")
  end

  task.async do
    DB.run("SELECT pg_sleep(2)")
  end

  task.async do
    sleep 2
  end

  task.async do
    `sleep 2`
  end
end

puts "Duration: #{Time.now - start}"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我们扩展了包含 URI.open 和 HTTParty 的前一个例子，增加了五个附加操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Redis 请求&lt;/li&gt;
&lt;li&gt;使用 net-ssh gem 进行的 SSH 连接&lt;/li&gt;
&lt;li&gt;使用 sequel gem 进行的数据库查询&lt;/li&gt;
&lt;li&gt;Ruby 的 sleep 方法&lt;/li&gt;
&lt;li&gt;运行 sleep 可执行文件的系统命令。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这个例子中的所有操作也需要恰好 2 秒才能运行。&lt;/p&gt;
&lt;p&gt;以下是示例输出：&lt;/p&gt;
&lt;p&gt;持续时间：2.083171146&lt;/p&gt;
&lt;p&gt;我们得到的输出结果和之前一样，这表明所有的操作都是并发运行的。哇，这有很多不同的 gem 可以异步运行！&lt;/p&gt;
&lt;p&gt;重点：&lt;strong&gt;任何阻塞操作（ Ruby 解释器等待的方法）都与 Async 兼容，并将在 Ruby 3.0 和更高版本的 Async 代码块中异步工作。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;性能看起来很好：7 x 2 = 14 秒，但示例在 2 秒内完成 – 很容易得到 7 倍的提升。&lt;/p&gt;
&lt;h3&gt;Fiber Scheduler （纤程调度器）&lt;/h3&gt;
&lt;p&gt;让我们花一点时间来反思一些重要的事情。这个例子中的所有操作（例如，URI.open ，Redis ，sleep ）都会根据上下文的不同而表现不同：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同步执行:
操作默认同步执行。整个 Ruby 程序（或者更具体的说，当前的线程）会等待一个操作完成后才会进行下一个操作。&lt;/li&gt;
&lt;li&gt;异步执行:
当操作包裹在一个 Async 块中时，操作会异步地执行。由此，多个 HTTP 或网络请求可以同时运行。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但是，例如，&lt;code&gt;HTTParty&lt;/code&gt; 或 &lt;code&gt;sleep&lt;/code&gt; 方法如何能同步和异步同时存在呢？ Async 库是否对所有这些 gems 和内部 Ruby 方法进行了猴子补丁？
这种魔术是由于 &lt;code&gt;Fiber Scheduler&lt;/code&gt;。这是 Ruby 3.0 的一个特性，使得 &lt;code&gt;async&lt;/code&gt; 能够很好地与现有的 Ruby gems 和方法集成 - 不需要任何 hack 或 猴子补丁(Monkey patch) ！&lt;/p&gt;
&lt;p&gt;&lt;a href="https://brunosutic.com/blog/ruby-fiber-scheduler" rel="nofollow"&gt;Fiber Scheduler 也可以单独使用&lt;/a&gt; (&lt;a href="https://mark24code.github.io/ruby/2023/10/12/Ruby-Fiber-Scheduler.html" rel="nofollow"&gt;链接译文&lt;/a&gt;)！用这种方式，只需要几个内置的 Ruby 方法就能启用异步编程。&lt;/p&gt;
&lt;p&gt;如你所想，Fiber Scheduler 触及的代码范围非常广：它是 Ruby 当前所有的阻塞 API ！这绝不仅仅是一个小功能。&lt;/p&gt;
&lt;h2&gt;扩展例子&lt;/h2&gt;
&lt;p&gt;让我们提高效率，并展示一个 Async Ruby 擅长的另一方面：扩展(scaling)。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-ruby"&gt;require "async"
require "async/http/internet"
require "redis"
require "sequel"

DB = Sequel.postgres(max_connections: 1000)
Sequel.extension(:fiber_concurrency)
# Warming up redis clients
redis_clients = 1.upto(1000).map { Redis.new.tap(&amp;amp;:ping) }

start = Time.now

Async do |task|
  http_client = Async::HTTP::Internet.new

  1000.times do |i|
    task.async do
      http_client.get("https://httpbin.org/delay/1.6")
    end

    task.async do
      redis_clients[i].blpop("abc123", 2)
    end

    task.async do
      DB.run("SELECT pg_sleep(2)")
    end

    task.async do
      sleep 2
    end

    task.async do
      `sleep 2`
    end
  end
end

puts "Duration: #{Time.now - start}s"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;此例子基于之前的那个例子，只是做了一些改动：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 &lt;code&gt;Async&lt;/code&gt; 区块中的所有内容都会被重复 &lt;code&gt;1000.times&lt;/code&gt; (运行 1000 次)，这将并发操作的数量增加到了 5000 。&lt;/li&gt;
&lt;li&gt;出于性能考虑，我们将 &lt;code&gt;URI.open&lt;/code&gt; 和 &lt;code&gt;HTTParty&lt;/code&gt; 替换为了 &lt;code&gt;async-http&lt;/code&gt; HTTP &lt;code&gt;客户端。async-http&lt;/code&gt; 可以与 HTTP2 一起工作，当进行大量请求时，它的速度要快得多。&lt;/li&gt;
&lt;li&gt;SSH 操作被移除了，因为我找不到一种正确的配置方法可以使其高效地工作。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;就像之前一样，每个独立操作都需要 2 秒才能执行。其输出为：&lt;/p&gt;
&lt;p&gt;持续时间: 13.672289712&lt;/p&gt;
&lt;p&gt;这表明累积运行时间为 10,000 秒的 5,000 个操作仅在 13.6 秒内就完成了！&lt;/p&gt;
&lt;p&gt;这个持续时间比前面的例子（ 2 秒）要长，这是因为创建这么多网络连接的开销。&lt;/p&gt;
&lt;p&gt;我们几乎没有进行性能调优（例如，调整垃圾收集，内存分配等），&lt;strong&gt;但我们仍然实现了 730 倍的“加速”，在我看来，这是一个相当令人印象深刻的结果！&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;扩容限制(Scaling limits)&lt;/h3&gt;
&lt;p&gt;最好的部分是：我们只是初步探索了使用 Async Ruby 所能做到的事情。&lt;/p&gt;
&lt;p&gt;虽然线程（ Threads ）的最大数量是 2048 （至少在我的机器上是这样），&lt;strong&gt;但是 Async tasks 的上限数量是百万级别的！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;你真的可以同时运行百万个异步操作吗？是的，你可以 - 已经有些用户做到了。&lt;/p&gt;
&lt;p&gt;Async 真的为 Ruby 打开了新局面：想象一下一个 HTTP 服务器处理成千上万的客户，或者同一时间处理成百上千的 websocket 连接 ... 这都是可能的！&lt;/p&gt;
&lt;h2&gt;结论&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Async Ruby 经过了漫长而神秘的开发期，但现在它稳定且已经准备好投入生产。&lt;/strong&gt;已经有一些公司在生产环境下运行它并从中受益。要开始使用它，你可以去 &lt;a href="https://github.com/socketry/async" rel="nofollow"&gt;Async 的仓库&lt;/a&gt;看看。&lt;/p&gt;
&lt;p&gt;唯一的注意点是，它不能和 Ruby on Rails 一起工作，因为 &lt;code&gt;ActiveRecord&lt;/code&gt; 不支持 &lt;code&gt;Async&lt;/code&gt; gem 。但如果不涉及到 &lt;code&gt;ActiveRecord&lt;/code&gt;，你仍然可以在 Rails 中使用它。&lt;/p&gt;
&lt;p&gt;Async 的最大优势在于扩展网络 I/O 操作，比如进行或接收 HTTP 请求。对于 CPU 密集型的工作负载，线程是更好的选择，但至少我们不再需要把他们用于所有事情。&lt;/p&gt;
&lt;p&gt;Async Ruby 非常强大，可扩展性极高。它是一个游戏规则改变者，我希望这篇文章能证明这一点。Async 改变了 Ruby 的可能性，并且当我们所有人开始更多地“异步”思考时，它将对 Ruby 社区产生重大影响。&lt;/p&gt;
&lt;p&gt;最好的一点是，它不会使任何现有的代码变得过时。&lt;strong&gt;就像 Ruby 本身一样，Async 设计得很美，使用起来也很愉快。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;希望你在使用 Async Ruby 时编程愉快！&lt;/p&gt;
&lt;p&gt;Happy hacking with Async Ruby!&lt;/p&gt;</description><pubDate>Thu, 12 Oct 2023 08:21:26 GMT</pubDate><guid isPermaLink="true">https://www.v2ex.com/t/981372#reply0</guid></item><item><title>[这个世界不完美] 以色列大使馆官微承认自己是纳粹？</title><link>https://www.v2ex.com/t/981371#reply20</link><description>&lt;p&gt;活久见了属于是&lt;/p&gt;
&lt;p&gt;&lt;img alt="Imgur" class="embedded_image" rel="noreferrer" src="https://i.imgur.com/16Rkyu3.png" /&gt;&lt;/p&gt;</description><pubDate>Thu, 12 Oct 2023 08:19:39 GMT</pubDate><guid isPermaLink="true">https://www.v2ex.com/t/981371#reply20</guid></item><item><title>[西安] 各位老哥，西安有无推荐的中医就诊</title><link>https://www.v2ex.com/t/981370#reply0</link><description></description><pubDate>Thu, 12 Oct 2023 08:18:02 GMT</pubDate><guid isPermaLink="true">https://www.v2ex.com/t/981370#reply0</guid></item><item><title>[推广] v2ers，有没有人买冬枣啊 😋</title><link>https://www.v2ex.com/t/981368#reply3</link><description>&lt;h4&gt;🌟 新鲜冬枣来啦！ 🌟&lt;/h4&gt;
&lt;p&gt;亲爱的朋友们，我姐姐家有十亩冬枣，今年果实丰硕，口感鲜美，甜而不腻，绝对是您健康零食的最佳选择！ 🍇&lt;/p&gt;
&lt;h4&gt;🌈 产品介绍：&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;5 斤 - 60 元&lt;/li&gt;
&lt;li&gt;10 斤 - 120 元&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;自家种植，100%绿色健康！ 🌿&lt;/p&gt;
&lt;p&gt;🏃‍♂ 机会有限，赶紧抢购吧！冬枣季节有限，错过就要等一年了。快来享受纯正的冬枣风味，满足您的味蕾！ 😋&lt;/p&gt;
&lt;h4&gt;📦 配送方式：&lt;/h4&gt;
&lt;p&gt;快递发货，包邮，注：偏远地区可能不行&lt;/p&gt;
&lt;h4&gt;😋联系方式：&lt;/h4&gt;
&lt;p&gt;&lt;img alt="img" class="embedded_image" rel="noreferrer" src="https://i.imgur.com/C3JJNgK.jpg" /&gt;&lt;/p&gt;
&lt;h4&gt;🌿枣&lt;/h4&gt;
&lt;p&gt;&lt;img alt="img" class="embedded_image" rel="noreferrer" src="https://imgur.com/AXHPlwM.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="img" class="embedded_image" rel="noreferrer" src="https://imgur.com/iHceIc5.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="img" class="embedded_image" rel="noreferrer" src="https://imgur.com/xv9cv5l.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="img" class="embedded_image" rel="noreferrer" src="https://imgur.com/8DUqSPt.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;本文案由 chatGPT3.5 倾情赞助&lt;/p&gt;</description><pubDate>Thu, 12 Oct 2023 08:11:13 GMT</pubDate><guid isPermaLink="true">https://www.v2ex.com/t/981368#reply3</guid></item><item><title>[问与答] 万能的 V 友，有没有什么简单好用的网络拓扑模拟器</title><link>https://www.v2ex.com/t/981366#reply2</link><description>&lt;p&gt;需要大致是这样的：希望能构建一个比较复杂的网络（由好几个小局域网组成，不同链路存在不同的丢包、延迟、带宽），用来做实验。手动开一堆虚拟机或者 Docker ，手动搭局域网设置这些参数肯定是可以的，但如果有几十上百个节点就很头疼了。&lt;/p&gt;
&lt;p&gt;有没有这样的一种工具，我通过配置文件来描述拓扑，工具自动地为我搭建一张网？类似这样的大规模拓扑模拟有什么好办法吗？&lt;/p&gt;</description><pubDate>Thu, 12 Oct 2023 08:03:04 GMT</pubDate><guid isPermaLink="true">https://www.v2ex.com/t/981366#reply2</guid></item><item><title>[程序员] 请求为啥 Stalled 这么久（前端大佬路过别走</title><link>https://www.v2ex.com/t/981365#reply1</link><description>&lt;p&gt;&lt;img alt="" class="embedded_image" rel="noreferrer" src="https://i.imgur.com/atT5o8V.png" /&gt;&lt;/p&gt;
&lt;p&gt;如果说浏览器有 6 个 TCP 链接的限制，那我看我这也没有那么多啊，前边的都完成了。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="embedded_image" rel="noreferrer" src="https://i.imgur.com/kRUiNv3.png" /&gt;&lt;/p&gt;</description><pubDate>Thu, 12 Oct 2023 08:00:43 GMT</pubDate><guid isPermaLink="true">https://www.v2ex.com/t/981365#reply1</guid></item><item><title>[GitHub Copilot] Vscode GitHub copilot 代码提示没反应</title><link>https://www.v2ex.com/t/981364#reply0</link><description>macOS 上 vs code 成功安装和登陆了 copilot ，copilot 聊天功能什么的可以使用。右下角也有正常的 copilot 图标。&lt;br /&gt;但是输代码时，没有任何反应。已重新安装 copilot 插件，无果。&lt;br /&gt;&lt;br /&gt;相同的 copilot 账号，在 jetbrains clion 上可以使用代码提示。</description><pubDate>Thu, 12 Oct 2023 08:00:27 GMT</pubDate><guid isPermaLink="true">https://www.v2ex.com/t/981364#reply0</guid></item><item><title>[macOS] macOS 有什么第三方 app 可以设置快捷键的？</title><link>https://www.v2ex.com/t/981363#reply0</link><description>&lt;p&gt;其实 macOS 自带的快捷键已经很好用了，但是我遇到一个问题是，我在 setting- keyboard- Services 上给我的 shortcuts 快捷指令设置好快捷键之后，每次重启电脑，我的设置就没了，又得重新设置。&lt;/p&gt;
&lt;p&gt;还有另一个问题就是使用系统自动的快捷键设置，有很多快捷键不能设置，因为会跟系统其他快捷键设置有冲突。我用第三方 app 例如 Raycast ，或者 BetterTouchTool 就可以我想要设置什么快捷键就使用什么快捷键，不受系统限制。&lt;/p&gt;
&lt;p&gt;最后一个问题就是 macOS 自带快捷键设置之后，处理优先级感觉较低，例如 macOS 开始经典的转圈圈系统卡死，我是用 shortcuts 写了一个 KILL SCIM ，每次都要等很久才能执行命令，但是如果我是使用 BetterTouchTool ，我只要按下 shift+commnad+k ，立马就执行了。&lt;/p&gt;
&lt;p&gt;或许你会说，那么 Raycast 和 BetterTouchTool 不是挺好的吗，为什么不用？
因为我只想要可以设置快捷键的 app 就行，我不需要其他的功能，尤其是 BetterTouchTool 我看到密密麻麻的设置就觉得太专业了。&lt;/p&gt;
&lt;p&gt;最后，求推荐一款简单的，只有可以设置快捷键的第三方 app ，我就想用 command+L 来休眠电脑，我想用 shift+commnad+k 来启用指定快捷指令。&lt;/p&gt;
&lt;p&gt;感谢！&lt;/p&gt;</description><pubDate>Thu, 12 Oct 2023 08:00:00 GMT</pubDate><guid isPermaLink="true">https://www.v2ex.com/t/981363#reply0</guid></item></channel></rss>