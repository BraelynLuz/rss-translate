<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>V2EX</title><link>https://www.v2ex.com/</link><description>way to explore</description><lastBuildDate>Thu, 16 Nov 2023 01:37:37 GMT</lastBuildDate><generator>rfeed v1.1.1</generator><docs>https://github.com/svpino/rfeed/blob/master/README.md</docs><item><title>[问与答] 附近学校每天 7 点就进行广播体操，很大噪音这个能投诉吗</title><link>https://www.v2ex.com/t/992323#reply0</link><description>&lt;p&gt;本来早上能多睡几十分钟的，本来睡眠就不好，现在被这个噪音搞得睡眠更差，我是住在几百米外都很大的噪声&lt;/p&gt;</description><pubDate>Thu, 16 Nov 2023 01:35:53 GMT</pubDate><guid isPermaLink="true">https://www.v2ex.com/t/992323#reply0</guid></item><item><title>[V2EX] [求助] 手机重置了， v2 的两步验证怎么关闭</title><link>https://www.v2ex.com/t/992322#reply0</link><description>之前手机太卡，把手机重置了，google authenticator 没了，目前电脑上 v2 还有登录态，怎么才能关闭两步验证啊，我要关了重新开，不然退出后就登录不了。</description><pubDate>Thu, 16 Nov 2023 01:33:34 GMT</pubDate><guid isPermaLink="true">https://www.v2ex.com/t/992322#reply0</guid></item><item><title>[问与答] 现在的安卓比 ios 好用</title><link>https://www.v2ex.com/t/992320#reply1</link><description>体验了下李跳跳，&lt;br /&gt;nnngram 替代电报官方版&lt;br /&gt;puretuber 替代 youtube ，无广告。&lt;br /&gt;微博用 share 或者 see 微博替代，无广告&lt;br /&gt;&lt;br /&gt;play + 奇妙应用&lt;br /&gt;apkpure&lt;br /&gt;appshare &lt;br /&gt;&lt;br /&gt;当然，ios 可以火箭 禁用一些规则，我还没这么配置过。</description><pubDate>Thu, 16 Nov 2023 01:33:05 GMT</pubDate><guid isPermaLink="true">https://www.v2ex.com/t/992320#reply1</guid></item><item><title>[Apple] 为什么 11 月我的人 Apple one 扣款还是 32？</title><link>https://www.v2ex.com/t/992319#reply0</link><description>我看官网涨价了，好像没看到生效日期.&lt;br /&gt;&lt;br /&gt;你们本月 Apple one 家庭组扣款多少？</description><pubDate>Thu, 16 Nov 2023 01:33:00 GMT</pubDate><guid isPermaLink="true">https://www.v2ex.com/t/992319#reply0</guid></item><item><title>[iPhone] 碎碎念 被手机折磨的一夜</title><link>https://www.v2ex.com/t/992317#reply0</link><description>&lt;p&gt;上周五突然发现收不到任何除系统外 App 的推送，排查了一切通知相关的选项，后台刷新什么的，重启都无解。最后只好备份再恢复。&lt;/p&gt;
&lt;p&gt;昨晚开始备份，100 多 G 花了 30-40 分钟，还挺快的。&lt;/p&gt;
&lt;p&gt;恢复到手机就开始折磨了，十一点半开始，到凌晨四点半才结束，十二点睡觉时定了个两小时后闹钟（手机恢复完还需要设置各种东西，担心影响第二天使用）。结果响了后发现还没结束。于是又定了两个小时闹钟，醒了还是没结束。。 然后又等了半小时，终于好了，然后又是各种设置 ，半梦半醒的，折磨。&lt;/p&gt;
&lt;p&gt;搜索了一下 ，也有部分人遇到这种问题，最后都是要恢复出厂设置。xx iphone 真的恶心 💢🤬&lt;/p&gt;</description><pubDate>Thu, 16 Nov 2023 01:31:50 GMT</pubDate><guid isPermaLink="true">https://www.v2ex.com/t/992317#reply0</guid></item><item><title>[NAS] 为什么硬盘盒这么贵呢</title><link>https://www.v2ex.com/t/992315#reply3</link><description>&lt;p&gt;在 tb 上看到像奥睿科的多盘位硬盘盒都要好几百，都快赶上一台普通的小型主机了。为啥这么贵呢&lt;/p&gt;</description><pubDate>Thu, 16 Nov 2023 01:28:39 GMT</pubDate><guid isPermaLink="true">https://www.v2ex.com/t/992315#reply3</guid></item><item><title>[Visual Studio Code] vsc 的 codeium tab 怎么保持会话</title><link>https://www.v2ex.com/t/992314#reply1</link><description>我是选择在 editor 中打开的，不然默认 ui 实在太窄了，然后每次切出这个 tab 再回来就默认新开了一个会话，很不方便，有办法保留住之前的吗</description><pubDate>Thu, 16 Nov 2023 01:25:37 GMT</pubDate><guid isPermaLink="true">https://www.v2ex.com/t/992314#reply1</guid></item><item><title>[深圳] [深圳租房] 南山来福士附近</title><link>https://www.v2ex.com/t/992313#reply0</link><description>后面长期在深圳工作，所以开始找房，公司在南山来福士，&lt;br /&gt;预算 5k 左右，无宠物男，找房要求：&lt;br /&gt;1 、采光好，隔音好&lt;br /&gt;2 、到南山来福士单程通勤 20 分钟左右（骑车，地铁都行）&lt;br /&gt;3 、装修干净，电器配套较齐全&lt;br /&gt;4 、水电费+服务费+网费别太高&lt;br /&gt;5 、尽量有隔断（洗衣机、床最好别在一个房间）&lt;br /&gt;&lt;br /&gt;有靠谱转租/中介也可以联系我&lt;br /&gt;PS：各位朋友有无避坑的小区公寓/需要特别注意的点分享，万分感谢</description><pubDate>Thu, 16 Nov 2023 01:21:02 GMT</pubDate><guid isPermaLink="true">https://www.v2ex.com/t/992313#reply0</guid></item><item><title>[OpenAI] 听说 gpt 知识库更新到了 2023 年 4 月，为啥 poe 的还是 21 年啊</title><link>https://www.v2ex.com/t/992312#reply1</link><description>买了官方 plus 会员的老哥能说说吗，知识库更新了吗</description><pubDate>Thu, 16 Nov 2023 01:19:47 GMT</pubDate><guid isPermaLink="true">https://www.v2ex.com/t/992312#reply1</guid></item><item><title>[VPS] oracle cloud 的免费 boot volume 到底能用几个呢</title><link>https://www.v2ex.com/t/992310#reply4</link><description>&lt;p&gt;之前有&lt;br /&gt;
2 个 AMD  1core+1G 免费实例&lt;br /&gt;
1 个 arm 3core 的实例  &lt;/p&gt;
&lt;p&gt;昨天删除了一个 AMD 的实例，顺带把对应的 boot volume 也删除（ terminate ）了。&lt;br /&gt;
等了 18 小时，目前 terminated 的实例和 boot volume 以及不在列表中了。&lt;br /&gt;
实例和存储列表中分别是 2 条，1 个 AMD+1ARM 以及对应的 boot volume  各 47G 合计 94G 吧&lt;/p&gt;
&lt;p&gt;但是去创建免费的实例 还是显示 boot volume 要收费.....&lt;/p&gt;
&lt;p&gt;搞不懂了。&lt;/p&gt;</description><pubDate>Thu, 16 Nov 2023 01:05:38 GMT</pubDate><guid isPermaLink="true">https://www.v2ex.com/t/992310#reply4</guid></item><item><title>[问与答] 有没有使用 chatgpt 的家用智能音响？</title><link>https://www.v2ex.com/t/992307#reply7</link><description>chatgpt 大火，现在有接入 chatgpt 的家用智能音响吗？</description><pubDate>Thu, 16 Nov 2023 00:43:13 GMT</pubDate><guid isPermaLink="true">https://www.v2ex.com/t/992307#reply7</guid></item><item><title>[程序员] one key 替代品咨询</title><link>https://www.v2ex.com/t/992305#reply8</link><description>&lt;p&gt;one key 不在给国内提供注册服务。
在线求助一个平替产品&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;稍微正规的(至少一眼看上去不会跑路的)&lt;/li&gt;
&lt;li&gt;能够支持 chatgpt plus 的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;大佬们，提供的资源啊&lt;/p&gt;</description><pubDate>Thu, 16 Nov 2023 00:41:43 GMT</pubDate><guid isPermaLink="true">https://www.v2ex.com/t/992305#reply8</guid></item><item><title>[分享创造] 🎁 [赠码] 瓦尔登 iPad 适配版上线啦，诚邀各位来体验这个专注于个人日程管理的 App</title><link>https://www.v2ex.com/t/992303#reply9</link><description>&lt;p&gt;&lt;a href="https://apps.apple.com/cn/app/id1595313870" rel="nofollow"&gt;瓦尔登&lt;/a&gt; 是一个集合了待办事项、目标管理、笔记备忘录三大模块的个人管理应用
不知不觉，瓦尔登上线快两年了，逐渐发展为我理想中的模样&lt;/p&gt;
&lt;p&gt;最开始差不多保持了一周更新一次频率，到现在逐渐趋于稳定，保持两周到一个月更新一次&lt;/p&gt;
&lt;p&gt;昨天上线了 iPad 适配版，期待在 iPad 上也能够拥有一款好用的日程管理 App ，也希望各位能够在使用过程中，如果有任何想法，都可以向开发者反馈，非常感激！
&lt;img alt="WX20231116-083812@2x" class="embedded_image" rel="noreferrer" src="https://i2.100024.xyz/2023/11/16/dw7xug.webp" /&gt;
&lt;img alt="WX20231116-083752@2x" class="embedded_image" rel="noreferrer" src="https://i2.100024.xyz/2023/11/16/dw8jcy.webp" /&gt;&lt;/p&gt;
&lt;h2&gt;在这里赠送一些兑换码各位，领取后在评论中注明一下，感谢啦：&lt;/h2&gt;
&lt;p&gt;月度会员：&lt;br /&gt;
LPH76MWK9HEL&lt;br /&gt;
HXK6RMWYA7XX&lt;br /&gt;
HRX7PE7X46LA&lt;br /&gt;
K7PTHMW7TL7H&lt;br /&gt;
TJ6XX4WJ7YLF&lt;br /&gt;
N79MAFMPMF6W&lt;br /&gt;
3HL3WJ64T6AJ&lt;br /&gt;
WHWTMHWAM63R&lt;br /&gt;
6WAKTHRE9FK4&lt;br /&gt;
HAY347A47JKE  &lt;/p&gt;
&lt;p&gt;年度会员：&lt;br /&gt;
TFMF9WAMP6EK&lt;br /&gt;
M3HP9WMAYWEX&lt;br /&gt;
6H3KLEE47RLP&lt;br /&gt;
F44K4FTAAMLY&lt;br /&gt;
YM93AAX3JR49&lt;/p&gt;</description><pubDate>Thu, 16 Nov 2023 00:41:15 GMT</pubDate><guid isPermaLink="true">https://www.v2ex.com/t/992303#reply9</guid></item><item><title>[OpenAI] 请教大佬， chatgpt 用不了了</title><link>https://www.v2ex.com/t/992302#reply2</link><description>正常使用的时候，手贱点了一下 gpt4 的充值页面，然后后退回来，然后就不能用了，点击登录没有反应，就很离谱我该怎么办</description><pubDate>Thu, 16 Nov 2023 00:29:50 GMT</pubDate><guid isPermaLink="true">https://www.v2ex.com/t/992302#reply2</guid></item><item><title>[生活] 出生 2 个月的娃就上托儿所了！</title><link>https://www.v2ex.com/t/992301#reply29</link><description>&lt;p&gt;坐标日本。我家是 6 个月去托儿所的，在别人看来已经很小了。&lt;/p&gt;
&lt;p&gt;今天娃刚满 8 个月，去托儿所时见到一个小得多的新入园的 baby 老师抱着，一问，才 2 个月。OMG&lt;/p&gt;</description><pubDate>Thu, 16 Nov 2023 00:16:45 GMT</pubDate><guid isPermaLink="true">https://www.v2ex.com/t/992301#reply29</guid></item><item><title>[MacBook Pro] 大家的触控板，双指缩放会间歇失灵吗？</title><link>https://www.v2ex.com/t/992300#reply4</link><description>新买的 MacBook Pro ，双指缩放会间歇失灵，表现是：有一些角度双指无法缩放，不识别拇指，只会识别成另外手指的运动。一旦失灵只要双手不离开触控板就一直失灵，但双指离开再找个角度就会恢复。但是失灵状况一直间歇存在。&lt;br /&gt;&lt;br /&gt;我之前的机器从来没出现过，买了台官翻机才有这个问题。是官翻机中招了吗？还是操作哪里有问题？&lt;br /&gt;&lt;br /&gt;重启、用酒精擦触控板都试过，但问题一直存在</description><pubDate>Thu, 16 Nov 2023 00:16:32 GMT</pubDate><guid isPermaLink="true">https://www.v2ex.com/t/992300#reply4</guid></item><item><title>[分享创造] 分享我写的简化版 GitHub copilot cli, 可以根据提示执行生成的 shell 命令</title><link>https://www.v2ex.com/t/992299#reply1</link><description>&lt;p&gt;仓库地址： &lt;a href="https://github.com/yongkangchen/cps" rel="nofollow"&gt;https://github.com/yongkangchen/cps&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;效果图：&lt;img alt="Screenshot 2023-11-15 at 3 50 04 PM" class="embedded_image" rel="noreferrer" src="https://github.com/yongkangchen/cps/assets/704762/e405dd64-4989-4f09-8028-1b39a55c9631" /&gt;&lt;/p&gt;</description><pubDate>Thu, 16 Nov 2023 00:00:17 GMT</pubDate><guid isPermaLink="true">https://www.v2ex.com/t/992299#reply1</guid></item><item><title>[Docker] 使用 docker 来编排 Web 应用</title><link>https://www.v2ex.com/t/992298#reply0</link><description>&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;使用 docker 可以轻松构建一个项目并运行，然而在真实的使用场景中，我们的项目并非是单一的，而是多个项目相互依赖组成一个 web 应用。&lt;/p&gt;
&lt;p&gt;考虑这样一个场景，一个正在运行的 web 应用，它用到了 vue 、java8 、java15 、tomcat 、nginx 、php 、mysql 和 redis 。如果要将这个应用迁移到一台新的服务器上运行，那么就需要在这台机器上重新安装所需的软件以及环境变量，这是很痛苦的。&lt;/p&gt;
&lt;p&gt;那么，有没有什么办法来解决这个问题呢？当然有，那就是本文的主角&lt;strong&gt;docker-compose&lt;/strong&gt;（ docker 编排）。本文就跟大家分享下我是如何使用它解决我的痛苦的，欢迎各位感兴趣的开发者阅读本文。&lt;/p&gt;
&lt;h2&gt;前置知识&lt;/h2&gt;
&lt;p&gt;阅读本文前，你需要先提前安装好&lt;a href="https://yeasy.gitbook.io/docker_practice/install" rel="nofollow"&gt;Docker&lt;/a&gt;和 &lt;a href="https://yeasy.gitbook.io/docker_practice/compose/install" rel="nofollow"&gt;docker-compose&lt;/a&gt;。如果你已经安装，我们先来了解几个基础概念。如果你仅仅只是想学习我是如何编排整个 web 应用的，请直接从&lt;a href="https://www.v2ex.com/##%E7%BC%96%E6%8E%92%E5%AE%B9%E5%99%A8" rel="nofollow"&gt;编排容器&lt;/a&gt;章节开始阅读。&lt;/p&gt;
&lt;h3&gt;镜像&lt;/h3&gt;
&lt;p&gt;操作系统分为&lt;strong&gt;内核&lt;/strong&gt;和&lt;strong&gt;用户空间&lt;/strong&gt;，对于 Linux 而言，内核启动后，会挂载&lt;code&gt;root&lt;/code&gt;文件系统，为其提供用户空间支持。而&lt;strong&gt;Docker&lt;/strong&gt;镜像就相当于一个&lt;code&gt;root&lt;/code&gt;文件系统。比如官方的镜像&lt;code&gt;ubuntu:20.04&lt;/code&gt;就包含了完整的一套 ubuntu 最小系统的&lt;code&gt;rooot&lt;/code&gt;文件系统。&lt;/p&gt;
&lt;p&gt;Docker 的镜像是一个比较特殊的文件系统，它除了提供容器运行时所需的东西外，还包含了一些为运行时准备的一些配置参数（挂载卷、环境变量、用户等）。镜像不会包含任何的动态数据，因此在构建之后，它的内容不会被改变。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果你还是一头雾水的话，可以将它比作“备份”，在需要的时候把它拿出来即可原封不动的获得备份时刻的内容。&lt;/p&gt;
&lt;p&gt;可能有些开发者会有疑问，即使是最小的 root 文件系统，它的体积也是庞大的。Docker 在设计时，就充分利用 &lt;a href="https://en.wikipedia.org/wiki/Union_mount" rel="nofollow"&gt;Union FS&lt;/a&gt; 的技术，将其设计为分层存储的架构。这种架构使得镜像的复用、定制变的更为容易，可以用之前构建好的镜像作为基础层，然后进一步添加新的层，以定制自己所需的内容，构建新的镜像。&lt;/p&gt;
&lt;p&gt;⚠️注意：镜像构建时，会一层层构建，前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层。因此，在编写镜像配置文件的时候，每一层尽量只包含该层需要添加的东西，任何额外的东西应该在该层构建结束前清理掉（比如你在某一层需要删除前一层的文件，它只是将文件标记为了已删除，最终容器运行的时候，虽然不会看到这个文件，但是实际上该文件会一直跟随镜像）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;容器&lt;/h3&gt;
&lt;p&gt;镜像与容器之间的关系，类似于 Java 中的&lt;strong&gt;类&lt;/strong&gt;与&lt;strong&gt;实例&lt;/strong&gt;。镜像是类，容器是实例化出来的实例。容器可以被创建、启动、停止、删除、暂停等。&lt;/p&gt;
&lt;p&gt;容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的命名空间。因此容器可以拥有自己的 root 文件系统、网络配置、进程空间。容器内的进程是运行在一个隔离的环境里，使用起来，就好像是在一个独立于宿主的系统下操作一样。&lt;/p&gt;
&lt;p&gt;前面我们讲过镜像使用的是分层存储，容器也是如此。每一个容器运行时，以镜像为基础层，在其上创建一个当前容器的存储层，这个为容器运行时读写而准备的存储层称之为&lt;strong&gt;容器存储层&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;⚠️注意：容器存储层的生命周期和容器一样，容器销毁时，存储层也随之销毁。因此，任何保存于存储层的信息都会随着容器的销毁而丢失。&lt;/p&gt;
&lt;p&gt;因此，当我们的容器需要进行数据写入时，需要 &lt;strong&gt;使用&lt;code&gt;volume&lt;/code&gt;数据卷&lt;/strong&gt; 或者 &lt;strong&gt;挂载宿主机的目录&lt;/strong&gt; 来实现数据的持久化。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;仓库&lt;/h3&gt;
&lt;p&gt;当我们构建好镜像之后，很容易在当前的宿主机上运行，但是，如果需要在其他服务器上使用这个镜像，我们就需要一个仓库来存储和分发它们。&lt;a href="https://docs.docker.com/registry/" rel="nofollow"&gt;Docker Registry&lt;/a&gt; 就是这样的服务。&lt;/p&gt;
&lt;p&gt;一个 &lt;strong&gt;Docker Registry&lt;/strong&gt; 中可以包含多个 &lt;strong&gt;仓库&lt;/strong&gt;（&lt;code&gt;Repository&lt;/code&gt;）；每个仓库可以包含多个 &lt;strong&gt;标签&lt;/strong&gt;（&lt;code&gt;Tag&lt;/code&gt;）；每个标签对应一个镜像。&lt;/p&gt;
&lt;p&gt;一个仓库包含同一个软件不同版本的镜像，标签就对应着软件的各个版本。我们通过&lt;code&gt;&amp;lt;仓库名&amp;gt;:&amp;lt;标签&amp;gt;&lt;/code&gt;的格式来指定具体是那个版本的镜像。&lt;/p&gt;
&lt;p&gt;我们以 ubuntu 镜像为例，ubuntu 是仓库的名字，其内包含有不同的版本标签，如：&lt;code&gt;18.04&lt;/code&gt;，&lt;code&gt;20.04&lt;/code&gt;。我们在编写配置文件的时候，就可以通过&lt;code&gt;ubuntu:18.04&lt;/code&gt;、&lt;code&gt;ubuntu:20.04&lt;/code&gt;来指定具体所需版本的镜像。如果忽略了标签，将视为&lt;code&gt;ubuntu:latest&lt;/code&gt;。&lt;/p&gt;
&lt;h4&gt;公开服务&lt;/h4&gt;
&lt;p&gt;Docker Registry 公开服务是开放给用户使用，允许用户管理镜像的 Registry 服务。一般这类公开服务允许用户免费上传、下载公开的镜像。&lt;/p&gt;
&lt;p&gt;最常使用的公开服务是官方的 &lt;a href="https://hub.docker.com/" rel="nofollow"&gt;Docker Hub&lt;/a&gt;，这个也是默认的 Registry 。拥有大量的官方镜像。除此之外，还有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Red Hat 的 &lt;a href="https://quay.io/repository/" rel="nofollow"&gt;Quay.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Google 的 &lt;a href="https://cloud.google.com/container-registry/" rel="nofollow"&gt;Google Container Registry&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;私有部署&lt;/h4&gt;
&lt;p&gt;当用户制作好一个镜像后，不方便在公开服务上发布时，就需要在内部自己搭建 Docker Registry 。官方提供了 &lt;a href="https://hub.docker.com/_/registry/" rel="nofollow"&gt;Docker Registry&lt;/a&gt; 镜像，可以直接使用做为私有 Registry 服务。&lt;/p&gt;
&lt;p&gt;开源的 Docker Registry 镜像只提供了 &lt;a href="https://docs.docker.com/registry/spec/api/" rel="nofollow"&gt;Docker Registry API&lt;/a&gt; 的服务端实现，足以支持 &lt;code&gt;docker&lt;/code&gt; 命令，不影响使用。但不包含图形界面，以及镜像维护、用户管理、访问控制等高级功能。&lt;/p&gt;
&lt;p&gt;除了官方的 Docker Registry 外，还有第三方软件实现了 Docker Registry API ，提供了用户界面以及一些高级功能。比如：&lt;a href="https://github.com/goharbor/harbor" rel="nofollow"&gt;Harbor&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;创建镜像&lt;/h2&gt;
&lt;p&gt;Docker 镜像的构建是通过读取&lt;code&gt;Dockerfile&lt;/code&gt;文件来完成的，它本质是一个文本文件，其内包含了一条条的指令，每一条指令构建一层，因此每一条指令的内容，就是描述该层应当如何构建。&lt;/p&gt;
&lt;h3&gt;编写配置文件&lt;/h3&gt;
&lt;p&gt;此处以我的开源项目 chat-system 的后端服务为例，在项目的根目录创建名为&lt;code&gt;chat-system-server-DockerFile&lt;/code&gt;的文件，在文件内添加下述代码：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过 FROM 指令来指定基础镜像&lt;/li&gt;
&lt;li&gt;通过 COPY 指令来复制文件到镜像内&lt;/li&gt;
&lt;li&gt;通过 EXPOSE 指令来声明服务运行时的端口号&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class="language-dockerfile"&gt;FROM tomcat:9.0.41-jdk8-openjdk

COPY ./chat-system-server.war /usr/local/tomcat/webapps/
COPY ./tomcat/conf/server.xml /usr/local/tomcat/conf/server.xml


EXPOSE 8080
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img alt="image-20231108213158942" class="embedded_image" rel="noreferrer" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/00d77e2b6b44481182132176f6a4c1bc%7Etplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=522&amp;amp;h=72&amp;amp;s=7392&amp;amp;e=png&amp;amp;b=2a2d34" /&gt;&lt;/p&gt;
&lt;p&gt;上面的指令：我们用了 9.0.41 版本的 tomcat 且 jdk 版本为 1.8 的镜像作为基础环境，随后我们拷贝了项目的 war 包到 tomact 的 webapps 目录下，拷贝了 tomcat 的配置文件到了镜像内。声明了&lt;code&gt;8080&lt;/code&gt;为本服务的访问端口号。&lt;/p&gt;
&lt;h4&gt;常用的指令&lt;/h4&gt;
&lt;p&gt;在 DockerFile 中，除了前面我们所讲的，还有很多内置的指令可以用，此处我们挑几个常用的来做下讲解。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ADD 用于从 URL 获取文件并将其放到目标路径下&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;RUN 用于执行命令行命令，支持两种格式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;shell 格式，&lt;code&gt;RUN &amp;lt;命令&amp;gt;&lt;/code&gt;相当于直接在命令行中输入命令。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;exec 格式，&lt;code&gt;RUN ["可执行文件","参数 1","参数 2"]&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CMD 用于指定容器在启动时所需要运行的程序以及参数，与 RUN 命令支持的格式相同&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ENV 用于设置环境变量&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;WORKDIR 用于指定工作目录，镜像在构建过程中，每一行都代表一层，如果你在上一层做了操作，在当前层需要基于上层完成其他事情，就需要指定它的工作目录&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;如果你想了解完整的的指令列表，请移步：&lt;a href="https://yeasy.gitbook.io/docker_practice/image/dockerfile" rel="nofollow"&gt;Dockerfile 指令详解&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;⚠️注意：在编写配置文件的时候，如果需要执行多个类似于&lt;strong&gt;RUN&lt;/strong&gt;的指令时，请用&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;来拼接。因为前面我们讲过 docker 是分层存储机制，每一个指令都会建立一层，如果运行了多个 RUN 指令，它就会创建多层镜像，这是完全没有意义的，而且很多运行时不需要的东西，都被装进了镜像里，比如编译环境、更新的软件包等等。结果就是产生非常臃肿、非常多层的镜像，不仅仅增加了构建部署的时间，也很容易出错。Dockerfile 支持 Shell 类的行尾添加 &lt;code&gt;\&lt;/code&gt; 的命令换行方式，以及行首 &lt;code&gt;#&lt;/code&gt; 进行注释的格式。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-dockerfile"&gt;RUN set -x; buildDeps='gcc libc6-dev make wget' \
    &amp;amp;&amp;amp; apt-get update \
    &amp;amp;&amp;amp; apt-get install -y $buildDeps \
    &amp;amp;&amp;amp; wget -O redis.tar.gz "http://download.redis.io/releases/redis-5.0.3.tar.gz" 
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h3&gt;构建镜像&lt;/h3&gt;
&lt;p&gt;打开终端，进入 Dockerfile 文件所在在的目录，执行&lt;code&gt; docker build -t chat-system-server:1.0.0 -f chat-system-server-DockerFile .&lt;/code&gt;命令，即可开始构建流程。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-t 用于指定容器名&lt;/li&gt;
&lt;li&gt;-f 用于指定配置文件&lt;/li&gt;
&lt;li&gt;. 表示当前目录，在终端执行&lt;code&gt;build&lt;/code&gt;命令时，需要指定构建镜像的上下文路径。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="image-20231109215729884" class="embedded_image" rel="noreferrer" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/026826dad9ef41ee90c6cfd646e6bcd2%7Etplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1630&amp;amp;h=750&amp;amp;s=148708&amp;amp;e=png&amp;amp;b=292c33" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;⚠️注意：如果你没有指定配置文件，它默认会使用目录下名为&lt;strong&gt;Dockerfile&lt;/strong&gt;的文件。如果你的配置文件中包含了 COPY 操作，请务必指定上下文路径。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;启动容器&lt;/h2&gt;
&lt;p&gt;启动容器有两种方式，一种是基于镜像新建一个容器并启动，另一种是启动一个处于终止状态的容器。&lt;/p&gt;
&lt;h3&gt;新建并启动&lt;/h3&gt;
&lt;p&gt;使用&lt;code&gt;docker run 镜像名&lt;/code&gt;即可创建一个容器并启动它，我们以上个章节创建的镜像为例。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;docker run chat-system-server:1.0.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;命令执行后，你将在控制台看到相关的输出。&lt;/p&gt;
&lt;p&gt;&lt;img alt="image-20231113215548784" class="embedded_image" rel="noreferrer" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/194fd306eef34851888e12dbe960c64c%7Etplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1960&amp;amp;h=680&amp;amp;s=196357&amp;amp;e=png&amp;amp;b=292c33" /&gt;&lt;/p&gt;
&lt;p&gt;容器启动之后，通过镜像中声明的 8080 端口访问，你会发现访问不了。这是因为容器启动后没有做&lt;strong&gt;端口映射&lt;/strong&gt;，我们需要在启动命令中添加&lt;code&gt;-p&lt;/code&gt;参数来指定端口。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-p 后面跟主机访问地址，&lt;code&gt;:&lt;/code&gt;后跟的是容器的访问端口。&lt;/li&gt;
&lt;li&gt;容器的访问端口通常会使用 Dockerfile 中通过&lt;code&gt;EXPOSE&lt;/code&gt;指令所定义的端口号。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;docker run -p 127.0.0.1:8080:8080 chat-system-server:1.0.0
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;启动已终止容器&lt;/h3&gt;
&lt;p&gt;使用&lt;code&gt;docker container start 容器名&lt;/code&gt;即可启动一个处于终止状态的容器。因为我们是新建的容器，没有给它命名，docker 会默认一个容器名，我们可以通过&lt;code&gt;docker ps -a&lt;/code&gt;命令来拿到容器名，或者通过 Webstorm 的 Docker 插件来获取。&lt;/p&gt;
&lt;p&gt;&lt;img alt="image-20231113223349254" class="embedded_image" rel="noreferrer" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/75131bf90c794b85b5e8ee020751cc57%7Etplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=838&amp;amp;h=590&amp;amp;s=63724&amp;amp;e=png&amp;amp;b=2a2d34" /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;docker container start crazy_wu
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;常用的参数与命令&lt;/h3&gt;
&lt;p&gt;容器在启动时，有丰富的参数可以配置，此处我列举几个最常用的参数。&lt;/p&gt;
&lt;h4&gt;在后台运行容器&lt;/h4&gt;
&lt;p&gt;我们&lt;a href="https://www.v2ex.com/###%E6%96%B0%E5%BB%BA%E5%B9%B6%E5%90%AF%E5%8A%A8" rel="nofollow"&gt;新建并启动一个容器&lt;/a&gt;时，默认会在当前终端中运行，终端窗口关闭后，容器也会跟着终止。通过&lt;code&gt;-d&lt;/code&gt;参数即可让它在后台运行。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;docker run -d -p 127.0.0.1:8080:8080 chat-system-server:1.0.0
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;为容器命名&lt;/h4&gt;
&lt;p&gt;我们在新建容器时，可以通过&lt;code&gt;--name&lt;/code&gt;参数来给它命名。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;docker run --name local_chat_system_server -d -p 127.0.0.1:8080:8080 chat-system-server:1.0.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img alt="image-20231113224915617" class="embedded_image" rel="noreferrer" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f45a8ba3a50c49a7b5644597b275a837%7Etplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=850&amp;amp;h=580&amp;amp;s=69902&amp;amp;e=png&amp;amp;b=2a2d34" /&gt;&lt;/p&gt;
&lt;h4&gt;终止与删除容器&lt;/h4&gt;
&lt;p&gt;我们可以通过&lt;code&gt;stop&lt;/code&gt;和&lt;code&gt;rm&lt;/code&gt;指令来终止和删除容器。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;# 终止容器
docker container stop 容器名
# 删除容器
docker container rm 容器名
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;进入容器&lt;/h4&gt;
&lt;p&gt;如果容器处于后台运行时，我们需要进入容器，做一些操作。就需要使用&lt;code&gt;docker exec -it 容器名 bash&lt;/code&gt;来实现。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;docker exec -it local_chat_system_server bash
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;执行命令后，就能看到熟悉的终端了。&lt;/p&gt;
&lt;p&gt;&lt;img alt="image-20231114222428490" class="embedded_image" rel="noreferrer" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/83c54c161f234b27b875cc0d4a7d95cc%7Etplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=2254&amp;amp;h=780&amp;amp;s=81996&amp;amp;e=png&amp;amp;b=292c33" /&gt;&lt;/p&gt;
&lt;h4&gt;数据挂载&lt;/h4&gt;
&lt;p&gt;前面我们说过，容器内存储的数据会随着容器的终止而丢失，需要挂载&lt;strong&gt;数据卷&lt;/strong&gt;来实现数据的持久化存储。通常有两种做法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据卷&lt;/li&gt;
&lt;li&gt;目录映射&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过数据卷来做存储需要先使用&lt;code&gt;docker volume create 卷名 &lt;/code&gt;命令来创建，&lt;a href="https://www.v2ex.com/###%E6%96%B0%E5%BB%BA%E5%B9%B6%E5%90%AF%E5%8A%A8" rel="nofollow"&gt;新建并启动一个容器&lt;/a&gt;的时候通过&lt;code&gt;--mount&lt;/code&gt;指令或者&lt;code&gt;-v 数据卷:容器目录地址&lt;/code&gt;来挂载。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;# 创建一个数据卷
docker volume create chat-system-data
# 启动容器并挂载数据卷
docker run -d  \
    --name local_chat_system_server \
    --mount source=chat-system-data,target=/usr/local/data \
   chat-system-server:1.0.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;容器启动后，会将日志写到我挂载的数据卷中。当我想在主机上查看写入的日志数据时，发现怎么找也找不到。查了很多资料，最后发现他的数据卷存储很复杂，并没有集中存储，而是分布式的。&lt;/p&gt;
&lt;p&gt;这种方式显然不是我想要的，而&lt;strong&gt;目录映射&lt;/strong&gt;的方式正好满足我的需求。我们只需要将数据卷改为主机的路径即可，此处我们以-v 参数为例。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;docker run -d  \
    --name local_chat_system_server \
    -v /Users/likai/Documents/chat-system-server-data:/usr/local/data \
   chat-system-server:1.0.0
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;⚠️注意：目录映射的形式会把指定的主机路径与容器内的目标路径做关联，本地主机做的操作会响应到容器内，反之亦然。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;编排容器&lt;/h2&gt;
&lt;p&gt;现在，我们回到文章开头所说的那个场景，一开始我打算使用&lt;code&gt;ubuntu:20.04&lt;/code&gt;作为基础镜像，写&lt;code&gt;DockerFile&lt;/code&gt;安装我需要的依赖包，设置环境变量，打包成镜像来使用。我在做事情之前，喜欢先请教下这方面玩的比较好的朋友。&lt;/p&gt;
&lt;p&gt;他们告诉我说，如果全部打包到一个镜像里 ，后期维护与扩展将成为恶梦，后面你要添加新项目，想访问一些之前项目里提供的服务，你就得做很大的改动。一般这种场景我们都会使用&lt;strong&gt;Docker Compose&lt;/strong&gt;来实现的。&lt;/p&gt;
&lt;p&gt;简而言之，Docker Compose 的作用就是将多个独立的容器组合起来，让容器之间可以轻易的互相访问，最终实现我们的需求。&lt;/p&gt;
&lt;h3&gt;编写配置文件&lt;/h3&gt;
&lt;p&gt;容器的编排是通过编写&lt;code&gt;docker-compose.yml&lt;/code&gt;配置文件来实现的，一般我们会将这个文件创建在项目的根目录。它的配置文件中包含有很多配置项，此处我们只列举本文需要用到的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;version ，用于指定 Docker Compose 文件的格式版本，以确保正确解析和处理文件中的配置，截止目前(2023-11-15)比较主流的版本为 3&lt;/li&gt;
&lt;li&gt;networks ，用于自定义网络&lt;/li&gt;
&lt;li&gt;services ，用于定义各种服务(mysql 、redis 、nginx 等)将它们组合到一起，形成一个 web 应用&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;定义网络&lt;/h3&gt;
&lt;p&gt;在物理机上部署服务时，多个服务之间相互访问，需要物理机必须处于同一个网关下（防火墙也要正确的配置），这样就能实现多个容器之间的互联互通。&lt;/p&gt;
&lt;p&gt;在 docker-compose 中流程也是一样的，因此我们就需要先定义一个网络，设置好网关。如下所示，我们定义了一个名为&lt;strong&gt;kaisir-docker-network&lt;/strong&gt;的自定义网络。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;external: true&lt;/code&gt; 表示该网络为外部网络，其他 Docker 容器可以连接到这个网络&lt;/li&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt; 指定了网络名称&lt;/li&gt;
&lt;li&gt;&lt;code&gt;driver: bridge&lt;/code&gt;指定网络的连接模式为&lt;strong&gt;桥接&lt;/strong&gt;，他还有很多其他模式可供选择（ host 、overlay 等）具体请自行查阅相关资料&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;ipam&lt;/code&gt;用于 IP 地址的配置&lt;ul&gt;
&lt;li&gt;driver: default ，用于指定 IP 地址管理的驱动程序，此处选择默认即可&lt;/li&gt;
&lt;li&gt;config ，用于配置 IP 地址池，在这里我们定义了一个子网为&lt;code&gt;192.168.30.0/24&lt;/code&gt;，其中包含了&lt;code&gt;192.168.30.1&lt;/code&gt;到&lt;code&gt;192.168.30.254&lt;/code&gt;的所有 IP 地址。&lt;code&gt;gateway&lt;/code&gt;指定了网关地址为&lt;code&gt; 192.168.30.1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class="language-yaml"&gt;networks:
    kaisir-docker-network:
        external: true
        name: kaisir-docker-network
        driver: bridge
        ipam:
            driver: default
            config:
                - subnet: 192.168.30.0/24
                  gateway: 192.168.30.1
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;通过上述配置，我们就可以在服务中连接这个网络了。有些开发者可能对&lt;code&gt;192.168.30.0/24&lt;/code&gt;比较疑惑，这里就稍作下解释 。这是一个 CIDR （ Classless Inter-Domain Routing ）表示法，用于表示 IP 地址范围。CIDR 表示法包括两部分：IP 地址的网络部分和主机部分，通过斜杠后面的数字表示网络的长度。&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;192.168.30.0/24&lt;/code&gt; 中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;192.168.30.0&lt;/code&gt; 是网络的基础 IP 地址。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/24&lt;/code&gt; 表示网络的前缀长度，即网络中有多少个连续的 IP 地址。在这里，它表示有 24 位用于网络，剩余的 32 - 24 = 8 位用于主机。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;具体地，&lt;code&gt;192.168.30.0/24&lt;/code&gt; 表示从 &lt;code&gt;192.168.30.0&lt;/code&gt; 到 &lt;code&gt;192.168.30.255&lt;/code&gt; 的 IP 地址范围，其中包括了 &lt;code&gt;192.168.30.1&lt;/code&gt; 到 &lt;code&gt;192.168.30.254&lt;/code&gt; 的所有 IP 地址。&lt;code&gt;192.168.30.0&lt;/code&gt; 是网络地址，&lt;code&gt;192.168.30.255&lt;/code&gt; 是广播地址。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;定义服务&lt;/h3&gt;
&lt;p&gt;我可以在&lt;code&gt;services&lt;/code&gt;指令下定义我们需要的服务，为他们连接网络、挂载数据卷、设置时区、定义访问端口等，我们以 mysql 为例来做讲解，如下所示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mysql 为服务名称&lt;/li&gt;
&lt;li&gt;image 为镜像名称&lt;/li&gt;
&lt;li&gt;container_name 为容器名称&lt;/li&gt;
&lt;li&gt;volumes 为我们需要挂载的数据卷&lt;/li&gt;
&lt;li&gt;ports 为端口映射&lt;/li&gt;
&lt;li&gt;networks 为服务需要接入的网络，定义服务需要分配的 ip 地址&lt;/li&gt;
&lt;li&gt;environment 设置容器的环境变量，此处我们设置了 mysql 的 root 用户密码以及时区&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class="language-yaml"&gt;services:
    mysql:
        image: mysql:5.7.42
        container_name: local_mysql
        volumes:
             - /Users/likai/Documents/mysql_data:/var/lib/mysql
             - /Users/likai/Documents/mysql_conf/my.cnf:/etc/my.cnf
        ports:
            - 3306:3306
        networks:
            kaisir-docker-network:
                ipv4_address: 192.168.30.11
        environment:
            - MYSQL_ROOT_PASSWORD=xxxx
            - TZ=Asia/Shanghai
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;通过这几行配置，我们就拥有了一个 mysql 服务。并且其他服务可以通过&lt;code&gt;192.168.30.11:3306&lt;/code&gt;访问到这个服务。&lt;/p&gt;
&lt;p&gt;我们再来定义 Java 服务和 nginx 服务，以我的&lt;code&gt;chat-system-server&lt;/code&gt;为例，在打包 Java 服务时，将数据库的地址指向我们刚才的 mysql 服务即可。&lt;/p&gt;
&lt;p&gt;&lt;img alt="image-20231115213554019" class="embedded_image" rel="noreferrer" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/481d04ceaebb44fa8ededf69ca4530cf%7Etplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1360&amp;amp;h=340&amp;amp;s=61937&amp;amp;e=png&amp;amp;b=1e1f22" /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-yaml"&gt;    chat-system-server:
        image: tomcat:9.0.41-jdk8-openjdk
        container_name: chat_system_server
        ports:
            - 8080:8080
        volumes:
            - /Users/likai/Documents/docker_tomcat/webapps:/usr/local/tomcat/webapps
            - /Users/likai/Documents/chat-system-server-data:/usr/local/data
            - /Users/likai/Documents/docker_tomcat/conf/:/usr/local/tomcat/conf
        environment:
            - TZ=Asia/Shanghai
        networks:
            kaisir-docker-network:
                ipv4_address: 192.168.30.12
    nginx-server:
        image: nginx:1.18.0
        container_name: local_nginx
        ports:
            - 80:80
            - 443:443
        volumes:
            - /Users/likai/Documents/nginx_config:/etc/nginx
            - /Users/likai/Documents/nginx_data:/usr/share/nginx/data
        environment:
            - TZ=Asia/Shanghai
        networks:
            - kaisir-docker-network
        depends_on:
            - redis
            - mysql
            - chat-system-server
            - kodbox
            - halo
                
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;同样的，其他的服务也通过这种格式进行定义即可。上面的配置中，我还定义了 redis 、kodbox 、halo 这三个服务。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;kodbox 是我之前&lt;a href="https://www.kaisir.cn/post/112" rel="nofollow"&gt;搭建的网盘服务&lt;/a&gt;，依赖 php 环境&lt;/li&gt;
&lt;li&gt;halo 是我的&lt;a href="https://www.kaisir.cn/post/140" rel="nofollow"&gt;个人网站&lt;/a&gt;，依赖 Java15 环境&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因为有多个服务都需要用到数据库，我需要确保数据库先启动，因此上面的配置中，我还用&lt;code&gt;depends_on&lt;/code&gt;指令定义了服务的启动顺序。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;⚠️注意：上面的配置文件中，本地路径是写死在配置文件中的，实际在使用的时候一般会通过变量的形式注入一个路径前缀进来，如下所示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果 &lt;code&gt;MY_VOLUME_PATH&lt;/code&gt; 环境变量存在并且非空，则使用它的值&lt;/li&gt;
&lt;li&gt;否则，使用默认值 &lt;code&gt;/default/path&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class="language-yaml"&gt;        volumes:
            - ${MY_VOLUME_PATH:-/default/path}/docker_tomcat/webapps:/usr/local/tomcat/webapps
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h3&gt;启动服务&lt;/h3&gt;
&lt;p&gt;最后，我们在终端通过&lt;code&gt;docker-compose up&lt;/code&gt;命令即可启动我们定义好的所有服务。因为我们映射了本地的 8080 端口为 chat_system_server 的服务，我们在 postman 内通过&lt;code&gt;127.0.0.1:8080&lt;/code&gt;即可访问到这个容器所提供的服务了。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;docker-compose up
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img alt="image-20231115220018378" class="embedded_image" rel="noreferrer" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/eda7f1c4637b4d05ae137f952366f3bd%7Etplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1920&amp;amp;h=770&amp;amp;s=157311&amp;amp;e=png&amp;amp;b=292c33" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="embedded_image" rel="noreferrer" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/407b0cb527a34c81b7bdfe4224177f6f%7Etplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1760&amp;amp;h=1150&amp;amp;s=159325&amp;amp;e=png&amp;amp;b=222222" /&gt;&lt;/p&gt;
&lt;p&gt;在 nginx 的配置文件中我也暴露了 80 端口出来，指向了 halo 服务，在浏览器中直接访问&lt;code&gt;127.0.0.1&lt;/code&gt;就能看到服务所提供的内容了。&lt;/p&gt;
&lt;p&gt;&lt;img alt="image-20231115222119946" class="embedded_image" rel="noreferrer" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b1b574fd24c7403eb3b059f43656b60f%7Etplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=2330&amp;amp;h=1980&amp;amp;s=2108978&amp;amp;e=png&amp;amp;b=262626" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;⚠️注意：如果你的配置文件中定义了&lt;strong&gt;路径变量&lt;/strong&gt;则需要在启动时传入这个变量，如下所示：&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;MY_VOLUME_PATH=/path/to/your/volume docker-compose up
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h3&gt;踩坑记录&lt;/h3&gt;
&lt;p&gt;我在配置 mysql 服务时，走了很多弯路，不知道哪步搞错了，启动服务后会报错&lt;code&gt;find: '/var/lib/mysql/mysql.sock': No such file or directory&lt;/code&gt;，导致启动失败，我尝试过删除容器、删除镜像，清空主机映射的目录文件，都解决不了。&lt;/p&gt;
&lt;p&gt;最后，发现是权限原因，在 &lt;code&gt;docker-compose.yml&lt;/code&gt;文件中，给 mysql 服务添加下述配置即可解决。问题解决后，再把这些去掉即可。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-yaml"&gt;command:
      - /bin/bash
      - -c
      - |
        chmod +rw /var/lib/mysql
        mysqld    
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;写在最后&lt;/h2&gt;
&lt;p&gt;至此，文章就分享完毕了。&lt;/p&gt;
&lt;p&gt;我是&lt;strong&gt;神奇的程序员&lt;/strong&gt;，一位前端开发工程师。&lt;/p&gt;
&lt;p&gt;如果你对我感兴趣，请移步我的&lt;a href="https://www.kaisir.cn/" rel="nofollow"&gt;个人网站&lt;/a&gt;，进一步了解。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文中如有错误，欢迎在评论区指正，如果这篇文章帮到了你，欢迎点赞和关注😊&lt;/li&gt;
&lt;li&gt;本文首发于&lt;a href="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8b7566ab57814aad861b378882c1ee58%7Etplv-k3u1fbpfcp-watermark.image" rel="nofollow"&gt;神奇的程序员&lt;/a&gt;公众号，未经许可禁止转载💌&lt;/li&gt;
&lt;/ul&gt;</description><pubDate>Wed, 15 Nov 2023 23:40:59 GMT</pubDate><guid isPermaLink="true">https://www.v2ex.com/t/992298#reply0</guid></item><item><title>[前端开发] 请教一个关于自动完成的问题</title><link>https://www.v2ex.com/t/992297#reply0</link><description>&lt;p&gt;如图所示，在 Android 上使用 Google 搜索时先输入任意关键字触发联想列表，再输入拼音，此时点击任意联想关键词右侧的↖按钮即可将搜索框文本替换成对应的内容，同时&lt;strong&gt;候选的拼音也消失了，但是键盘依然是激活的&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;测试了几个常见的搜索引擎，搜狗、Bing 和 DuckDuckGO 都可以做到，百度和 360 在替换文本后拼音还在。&lt;/p&gt;
&lt;p&gt;查了各种关于 Composition Events 相关的资料，但多数是关于防抖和节流的内容，也尝试了先 blur 再 focus 这种破坏体验的操作。搜了一圈自动完成库，似乎都是点击候选还残留拼音的。&lt;/p&gt;
&lt;p&gt;请教一下大佬们怎么才能实现这个平滑的效果呀？&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="embedded_image" rel="noreferrer" src="https://img.chkaja.com/12130106dd6e7298.jpg" /&gt;&lt;/p&gt;</description><pubDate>Wed, 15 Nov 2023 23:29:43 GMT</pubDate><guid isPermaLink="true">https://www.v2ex.com/t/992297#reply0</guid></item><item><title>[Java] 初入 Java ，看不懂 各种奇奇怪怪的 PO、VO、DTO、BO、**O…求一份攻略</title><link>https://www.v2ex.com/t/992296#reply41</link><description>一大堆疑惑：&lt;br /&gt;&lt;br /&gt;入参时，Controller 接收哪个 O ？&lt;br /&gt;Service 接收和 Mybatis 接收哪个 O ？&lt;br /&gt;&lt;br /&gt;Mybatis 返回的可能是 PO (比如 getById 或者 selectByPrimaryKey)，但也可能是自定义的 POJO 吧(比如一条复杂 Join 的结果)，在这类情况下，Mybatis 返回的这些对象属于什么 O ？这些对象能被 Service 直接返回吗？&lt;br /&gt;&lt;br /&gt;Service 应该返回什么 O 给 Controller ？&lt;br /&gt;&lt;br /&gt;BO 又是个啥，看了不少资料愣是没整明白。&lt;br /&gt;&lt;br /&gt;DTO 在什么时候用，有说层之间入参和输出的，也有说调用其它系统的，总之乱七八糟。。。&lt;br /&gt;&lt;br /&gt;PS：项目没有使用 DDD ，是传统 SpringMVC+Mybatis 三层的设计。主要原因是我不懂 DDD…能力有限&lt;br /&gt;&lt;br /&gt;最好能够配合示例代码或者伪代码，谢谢大佬们。</description><pubDate>Wed, 15 Nov 2023 22:27:04 GMT</pubDate><guid isPermaLink="true">https://www.v2ex.com/t/992296#reply41</guid></item></channel></rss>